const { brotliCompressSync } = require('node:zlib')
const vm = require('node:vm')
const v8 = require('node:v8')

v8.setFlagsFromString('--no-lazy')

if (Number.parseInt(process.versions.node, 10) >= 12) {
  v8.setFlagsFromString('--no-flush-bytecode') // Thanks to A-Parser (@a-parser)
}

/**
 * Generates v8 bytecode buffer
 *
 * @param {string} javascriptCode - JavaScript source that will be compiled to bytecode.
 * @param {boolean} [compress] - Compress the bytecode.
 * @returns {Buffer} - The generated bytecode.
 */
module.exports = function compileCode(javascriptCode, compress = false) {
  if (typeof javascriptCode !== 'string') {
    throw new Error(`javascriptCode must be string. ${typeof javascriptCode} was given.`)
  }

  const script = new vm.Script(javascriptCode, { produceCachedData: true })

  const bytecode =
    script.createCachedData && script.createCachedData.call ? script.createCachedData() : script.cachedData

  return compress ? brotliCompressSync(bytecode) : bytecode
}
